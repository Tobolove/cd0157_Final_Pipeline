---
AWSTemplateFormatVersion: 2010-09-09

Description: EKSWSV1


Parameters:

  EksClusterName:
    Type: String
    Description: TODO - The name of the EKS cluster created
    Default: eksctl-demo
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter the EKS cluster name

  GitSourceRepo:
    Type: String
    Description: TODO - GitHub source repository - must contain a Dockerfile and buildspec.yml in the base
    Default: cd0157_Final_Pipeline
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub repository name

  GitBranch:
    Type: String
    Default: main
    Description: TODO - GitHub git repository branch - change triggers a new build
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub repository branch name

  GitHubToken:
    Type: String
    NoEcho: true
    Description: TODO - GitHub API token - see https://github.com/blog/1509-personal-api-tokens
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub personal access token

  GitHubUser:
    Type: String
    Default: tobolove # <--- Sicherstellen, dass das dein GitHub Username ist!
    Description: TODO - GitHub username or organization
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub username or organization

  CodeBuildDockerImage:
    Type: String
    Default: aws/codebuild/standard:4.0
    Description: AWS CodeBuild Docker optimized image
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a CodeBuild Docker image

  KubectlRoleName:
    Type: String
    Default: UdacityFlaskDeployCBKubectlRole
    Description: TODO - IAM role used by kubectl to interact with EKS cluster
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a kubectl IAM role


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: GitHub
        Parameters:
          - GitHubUser
          - GitHubToken
          - GitSourceRepo
          - GitBranch
      - Label:
          default: CodeBuild
        Parameters:
          - CodeBuildDockerImage
      - Label:
          default: IAM
        Parameters:
          - KubectlRoleName
      - Label:
          default: EKS
        Parameters:
          - EksClusterName
    ParameterLabels:
      GitHubUser:
        default: Username
      GitHubToken:
        default: Access token
      GitSourceRepo:
        default: Repository
      GitBranch:
        default: Branch
      CodeBuildDockerImage:
        default: Docker image
      KubectlRoleName:
        default: kubectl IAM role
      EksClusterName:
        default: EKS cluster name


Resources:

  EcrDockerRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain

  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  CustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          # Start des NEUEN vereinfachten/Ã¼berschreibenden Codes
          import json
          import boto3
          import urllib.request
          import urllib.parse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              response = {
                  'Status': 'SUCCESS',
                  "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': {"Message": "Resource processing successful!"},
              }

              client = boto3.client('iam')
              try:
                  # Only modify trust policy on Create or Update
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      logger.info("Processing Create/Update request (Simplified - Overwrite Policy)")
                      kubectl_role_name = event['ResourceProperties']['KubectlRoleName']
                      build_role_arn = event['ResourceProperties']['CodeBuildServiceRoleArn']
                      logger.info(f"Target KubectlRoleName: {kubectl_role_name}")
                      logger.info(f"CodeBuild Role ARN to add: {build_role_arn}")

                      # Validate build_role_arn format before using
                      if not build_role_arn or not build_role_arn.startswith('arn:aws:iam::'):
                          raise ValueError(f"Invalid CodeBuildServiceRoleArn received: {build_role_arn}")

                      # Create a NEW policy document, overwriting anything existing
                      # It ONLY trusts the CodeBuild role now.
                      new_assume_doc = {
                          "Version": "2012-10-17",
                          "Statement": [
                              {
                                  "Effect": "Allow",
                                  "Principal": { "AWS": build_role_arn },
                                  "Action": "sts:AssumeRole"
                              }
                              # NOTE: Any previously trusted entities for KubectlRoleName are removed!
                          ]
                      }

                      logger.info(f"OVERWRITING trust policy with: {json.dumps(new_assume_doc)}")
                      update_response = client.update_assume_role_policy(
                          RoleName = kubectl_role_name,
                          PolicyDocument = json.dumps(new_assume_doc)
                      )
                      logger.info(f"update_assume_role_policy response: {update_response}")
                      response['Data'] = {"Message": "Trust policy overwritten successfully"}

                  elif event['RequestType'] == 'Delete':
                      logger.info("Processing Delete request - no action taken.")
                      response['Data'] = {"Message": "Delete request processed (no-op)"}

              except Exception as e:
                  logger.error(f"Error processing event: {e}", exc_info=True)
                  response['Status'] = 'FAILED'
                  response["Reason"] = str(e) # Use str(e) for cleaner message
                  response['Data'] = {"Message": "Resource processing failed"}

              # Send signal back to CloudFormation
              response_body = json.dumps(response)
              logger.info(f"Response body: {response_body}")
              logger.info(f"Response URL: {event['ResponseURL']}")

              headers = {'Content-Type': '','Content-Length': str(len(response_body))} # Empty Content-Type is required by CFN

              try:
                  request = urllib.request.Request(
                      url=event['ResponseURL'],
                      data=response_body.encode('utf-8'),
                      headers=headers,
                      method='PUT'
                  )
                  with urllib.request.urlopen(request) as resp:
                      logger.info(f"CloudFormation signal response status: {resp.status}")
              except Exception as e:
                  logger.error(f"Failed to send CloudFormation signal: {e}", exc_info=True)
                  raise

              return response # Return value might not be strictly needed by CFN, signal is key
          # Ende des NEUEN Codes
      Handler: index.handler
      Role: !GetAtt CustomResourceLambdaExecutionRole.Arn
      Runtime: python3.9   # <--- KORRIGIERT!
      Timeout: 300

  CustomResourceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: codepipeline-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/${KubectlRoleName}
                Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:UpdateAssumeRolePolicy

  KubectlAssumeRoleCustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomResourceLambda.Arn
      KubectlRoleName: !Ref KubectlRoleName
      CodeBuildServiceRoleArn: !GetAtt CodeBuildServiceRole.Arn
    DependsOn:
      - CustomResourceLambda
      - CodeBuildServiceRole

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: codepipeline-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive
                  - iam:PassRole
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
    DependsOn: CodePipelineArtifactBucket

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/${KubectlRoleName}
                Effect: Allow
                Action:
                  - sts:AssumeRole
              - Resource: '*'
                Effect: Allow
                Action:
                  - eks:Describe*
              - Resource: '*'
                Effect: Allow
                Action:
                  - ssm:GetParameters
              - Resource: '*'
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: '*'
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
              - Resource: '*'
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterfacePermission
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrDockerRepository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildDockerImage
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
          - Name: REPOSITORY_NAME
            Value: !Ref GitSourceRepo
          - Name: REPOSITORY_BRANCH
            Value: !Ref GitBranch
          - Name: EKS_CLUSTER_NAME
            Value: !Ref EksClusterName
          - Name: EKS_KUBECTL_ROLE_ARN
            Value: !Sub arn:aws:iam::${AWS::AccountId}:role/${KubectlRoleName}
        PrivilegedMode: true
      Name: !Ref AWS::StackName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
    DependsOn: KubectlAssumeRoleCustomResource

  CodePipelineGitHub:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitSourceRepo
                Branch: !Ref GitBranch
                OAuthToken: !Ref GitHubToken # Hier wird der Token Parameter verwendet
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
    DependsOn: CodeBuildProject